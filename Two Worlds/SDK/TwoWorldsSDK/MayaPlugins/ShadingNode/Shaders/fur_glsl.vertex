//#CONFIGURATION:1:1:1:0.5#
// Config:       ^ ^ ^ ^^^
//               | | |  |
//               | | |  |
//               | | |  +--> AlphaTestRef (Alphatest reference value)
//               | | +-----> AlphaTest (0 - None, 1, Greater, 2 - Less)
//               | +-------> BlendMode (0 - None, 1 - Blend, 2 - Add)
//               +---------> ZWriteEnable (0 - Disabled, 1 - Enabled)
//
///////////////////////////////////////////////////////////////////////////////
#version 110
#define DO_NOT_USE_DYNAMIC_LIGHTS

uniform mat4		gModelviewMatrix;
uniform mat4		gProjectionMatrix;
uniform mat4		gModelviewMatrixIT;
uniform mat4		gProjectionMatrixIT;
uniform vec4		gCameraPosition;
uniform vec4		gLightPosition;
uniform vec4		gLightDirection;
uniform vec4		gAmbientColor;
uniform vec4		gDiffuseColor;
uniform vec4		gSpecularColor;
uniform vec4		gSideColor;
uniform vec4		gDestructionColor;
uniform vec4		gFurFactor;
uniform float       gFurNS;
uniform vec4		gDestructionTilesFactor;
uniform float		gTimeFactor;
uniform vec4        gWindFactor;
uniform vec4	    gColorFactor0;
uniform vec4	    gColorFactor1;
uniform vec4	    gColorFactor2;
uniform vec4	    gColorFactor3;
uniform sampler2D	gBaseTexture;
uniform sampler2D	gBumpTexture;
uniform sampler2D	gDestructionTexture;
uniform sampler2D	gColorTexture;
uniform samplerCube gCubeTexture;
uniform sampler3D	g3DNoiseTexture;

//
// Lights
//
uniform vec4		gLight0_Position;
uniform vec4		gLight0_Direction;
uniform vec4		gLight0_Color;
uniform vec4		gLight0_Angle;
uniform vec4		gLight0_Distance;

uniform vec4		gLight1_Position;
uniform vec4		gLight1_Direction;
uniform vec4		gLight1_Color;
uniform vec4		gLight1_Angle;
uniform vec4		gLight1_Distance;

uniform vec4		gLight2_Position;
uniform vec4		gLight2_Direction;
uniform vec4		gLight2_Color;
uniform vec4		gLight2_Angle;
uniform vec4		gLight2_Distance;

///////////////////////////////////////////////////////////////////////////////
//
// Per vertex light contribution
//
vec4 LightContribution(in vec3 VertexPosition,
					   in vec3 VertexNormal,
					   in vec3 VertexTangent,
					   in vec3 VertexBinormal,

					   in vec4 DynLightPos,
					   in vec4 DynLightDir,
					   in vec4 DynLightDist,
					   in vec4 DynLightAngl)
{
 vec4 result;

 vec3  lvec        = DynLightPos.xyz - VertexPosition.xyz;
 float lvec_lensqr = dot(lvec, lvec);
 float lvec_leninv = inversesqrt(lvec_lensqr);
 vec3  lvec_normal = lvec.xyz * lvec_leninv;

 result.xyz        = vec3(dot(lvec_normal.xyz, VertexTangent.xyz), 
                          dot(lvec_normal.xyz, VertexBinormal.xyz), 
						  dot(lvec_normal.xyz, VertexNormal.xyz)).xyz;

 float d           = 1.0 - min(max(lvec_lensqr-DynLightDist.x, 0.0)*DynLightDist.y, 1.0);
 float cutoff      = clamp((dot(-lvec_normal.xyz, DynLightDir.xyz) - DynLightAngl.x) * DynLightAngl.y, 0.0, 1.0);
 result.w          = (cutoff * d);

 return result;
}
///////////////////////////////////////////////////////////////////////////////
void main(void)
{
 vec4 Po   = vec4(gl_Vertex.xyz, 1.0);
 vec3 Pw   = (gModelviewMatrix * Po).xyz;

 //
 // Calculate orthonormal basics
 //
 vec3 Nn = (gModelviewMatrixIT * vec4(gl_Normal.xyz, 0.0)).xyz;
 vec3 Tn = (gModelviewMatrixIT * vec4(gl_MultiTexCoord1.xyz, 0.0)).xyz;
 Nn		 = normalize(Nn);
 Tn		 = normalize(Tn);

 vec3 Bn = cross(Nn, Tn);

 Pw.xyz += Nn.xyz * gFurNS;
 gl_Position = gProjectionMatrix * vec4(Pw.xyz, 1.0);

 //
 // Mirrored flipp where need
 //
 vec2 DestructionUV = gl_MultiTexCoord0.xy * gDestructionTilesFactor.xy;
 if (gl_Color.g > 0.75)
 {
	 Tn.xyz			  *= -1.0;
	 DestructionUV.xy *= -1.0;
 }

 gl_TexCoord[0].xy  = gl_MultiTexCoord0.xy;
 gl_TexCoord[0].zw  = DestructionUV;
 gl_TexCoord[1].xyz = Po.xyz * gFurFactor.xyz;

 //
 // Calculate L & H vectors
 //
 vec3 Ln = normalize(gLightPosition.xyz  - Pw);
 vec3 Vn = normalize(gCameraPosition.xyz - Pw);
 vec3 Hn = normalize(Vn + Ln);

 //
 // Transform to tangent space
 //
 gl_TexCoord[2].xyz = vec3(dot(Ln, Tn), dot(Ln, Bn), dot(Ln, Nn)).xyz;
 gl_TexCoord[3].xyz = vec3(dot(Hn, Tn), dot(Hn, Bn), dot(Hn, Nn)).xyz;

#ifndef DO_NOT_USE_DYNAMIC_LIGHTS  
 gl_TexCoord[4] = LightContribution(Pw, Nn, Tn, Bn,
									gLight0_Position,
									gLight0_Direction,
									gLight0_Distance,
									gLight0_Angle);

 gl_TexCoord[5] = LightContribution(Pw, Nn, Tn, Bn,
									gLight1_Position,
									gLight1_Direction,
									gLight1_Distance,
									gLight1_Angle);

 gl_TexCoord[6] = LightContribution(Pw, Nn, Tn, Bn,
									gLight2_Position,
									gLight2_Direction,
									gLight2_Distance,
									gLight2_Angle);
#endif									

 //
 // Determine if object is front or back facing
 //
 gl_FrontColor.a = 1.0;
 gl_BackColor.a  = 0.0;

 return;
}
///////////////////////////////////////////////////////////////////////////////
