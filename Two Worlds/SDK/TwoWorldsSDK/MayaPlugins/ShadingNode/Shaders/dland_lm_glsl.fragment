#version 110
#define DO_NOT_USE_DYNAMIC_LIGHTS

uniform mat4		gModelviewMatrix;
uniform mat4		gProjectionMatrix;
uniform mat4		gModelviewMatrixIT;
uniform mat4		gProjectionMatrixIT;
uniform vec4		gCameraPosition;
uniform vec4		gLightPosition;
uniform vec4		gLightDirection;
uniform vec4		gAmbientColor;
uniform vec4		gDiffuseColor;
uniform vec4		gSpecularColor;
uniform vec4		gSideColor;
uniform vec4		gDestructionColor;
uniform vec4		gFurFactor;
uniform float       gFurNS;
uniform vec4		gDestructionTilesFactor;
uniform float		gTimeFactor;
uniform vec4        gWindFactor;
uniform vec4	    gColorFactor0;
uniform vec4	    gColorFactor1;
uniform vec4	    gColorFactor2;
uniform vec4	    gColorFactor3;
uniform sampler2D	gBaseTexture;
uniform sampler2D	gBumpTexture;
uniform sampler2D	gDestructionTexture;
uniform sampler2D	gColorTexture;
uniform samplerCube gCubeTexture;
uniform sampler3D	g3DNoiseTexture;

//
// Lights
//
uniform vec4		gLight0_Position;
uniform vec4		gLight0_Direction;
uniform vec4		gLight0_Color;
uniform vec4		gLight0_Angle;
uniform vec4		gLight0_Distance;

uniform vec4		gLight1_Position;
uniform vec4		gLight1_Direction;
uniform vec4		gLight1_Color;
uniform vec4		gLight1_Angle;
uniform vec4		gLight1_Distance;

uniform vec4		gLight2_Position;
uniform vec4		gLight2_Direction;
uniform vec4		gLight2_Color;
uniform vec4		gLight2_Angle;
uniform vec4		gLight2_Distance;

///////////////////////////////////////////////////////////////////////////////
void main(void)
{
 vec4 DiffuseMap = texture2D(gBaseTexture,	gl_TexCoord[0].xy);
 vec4 LightMap   = texture2D(gColorTexture, gl_TexCoord[0].zw);

 float Diffuse   = gl_TexCoord[1].x;

 vec3 DMap      = DiffuseMap.rgb * LightMap.rgb;

 vec3 LCntrb    = Diffuse * gDiffuseColor.rgb;

 vec3 Result    = clamp(LCntrb.rgb + gAmbientColor.rgb, 0.0, 1.0);
	  Result    = clamp((DMap.rgb * Result), 0.0, 1.0);

 gl_FragColor   = vec4(Result.xyz, DiffuseMap.a);

 return;
}
///////////////////////////////////////////////////////////////////////////////
