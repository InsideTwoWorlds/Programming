//#CONFIGURATION:1:0:1:0.5#
// Config:       ^ ^ ^ ^^^
//               | | |  |
//               | | |  |
//               | | |  +--> AlphaTestRef (Alphatest reference value)
//               | | +-----> AlphaTest (0 - None, 1, Greater, 2 - Less)
//               | +-------> BlendMode (0 - None, 1 - Blend, 2 - Add)
//               +---------> ZWriteEnable (0 - Disabled, 1 - Enabled)
//
///////////////////////////////////////////////////////////////////////////////
#version 110
#define DO_NOT_USE_DYNAMIC_LIGHTS

uniform mat4		gModelviewMatrix;
uniform mat4		gProjectionMatrix;
uniform mat4		gModelviewMatrixIT;
uniform mat4		gProjectionMatrixIT;
uniform vec4		gCameraPosition;
uniform vec4		gLightPosition;
uniform vec4		gLightDirection;
uniform vec4		gAmbientColor;
uniform vec4		gDiffuseColor;
uniform vec4		gSpecularColor;
uniform vec4		gSideColor;
uniform vec4		gDestructionColor;
uniform vec4		gFurFactor;
uniform float       gFurNS;
uniform vec4		gDestructionTilesFactor;
uniform float		gTimeFactor;
uniform vec4        gWindFactor;
uniform vec4	    gColorFactor0;
uniform vec4	    gColorFactor1;
uniform vec4	    gColorFactor2;
uniform vec4	    gColorFactor3;
uniform sampler2D	gBaseTexture;
uniform sampler2D	gBumpTexture;
uniform sampler2D	gDestructionTexture;
uniform sampler2D	gColorTexture;
uniform samplerCube gCubeTexture;
uniform sampler3D	g3DNoiseTexture;

//
// Lights
//
uniform vec4		gLight0_Position;
uniform vec4		gLight0_Direction;
uniform vec4		gLight0_Color;
uniform vec4		gLight0_Angle;
uniform vec4		gLight0_Distance;

uniform vec4		gLight1_Position;
uniform vec4		gLight1_Direction;
uniform vec4		gLight1_Color;
uniform vec4		gLight1_Angle;
uniform vec4		gLight1_Distance;

uniform vec4		gLight2_Position;
uniform vec4		gLight2_Direction;
uniform vec4		gLight2_Color;
uniform vec4		gLight2_Angle;
uniform vec4		gLight2_Distance;

///////////////////////////////////////////////////////////////////////////////
void main(void)
{
 vec4 Po   = vec4(gl_Vertex.xyz, 1.0);
 vec3 Pw   = (gModelviewMatrix * Po).xyz;
 gl_Position = (gProjectionMatrix * vec4(Pw.xyz, 1.0));

 //
 // Calculate orthonormal basics
 //
 vec3 Nn   = (gModelviewMatrixIT * vec4(gl_Normal.xyz, 0.0)).xyz;
 Nn		   = normalize(Nn);

 gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
 gl_TexCoord[0].zw = gl_MultiTexCoord3.xy;

 //
 // Calculate L vector
 //
 vec3 Ln = normalize(gLightPosition.xyz - Pw);

 //
 // Calculate diffuse
 //
 gl_TexCoord[1].x = clamp(dot(Ln.xyz, Nn.xyz), 0.0, 1.0);

 //
 // Determine if object is front or back facing
 //
 gl_FrontColor.a = 1.0;
 gl_BackColor.a  = 0.0;

 return;
}
///////////////////////////////////////////////////////////////////////////////
