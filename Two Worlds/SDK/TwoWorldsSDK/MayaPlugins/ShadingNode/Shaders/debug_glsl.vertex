//#CONFIGURATION:1:0:0:1.0#
// Config:       ^ ^ ^ ^^^
//               | | |  |
//               | | |  |
//               | | |  +--> AlphaTestRef (Alphatest reference value)
//               | | +-----> AlphaTest (0 - None, 1, Greater, 2 - Less)
//               | +-------> BlendMode (0 - None, 1 - Blend, 2 - Add)
//               +---------> ZWriteEnable (0 - Disabled, 1 - Enabled)
//
///////////////////////////////////////////////////////////////////////////////
#version 110
#define DO_NOT_USE_DYNAMIC_LIGHTS

uniform mat4		gModelviewMatrix;
uniform mat4		gProjectionMatrix;
uniform mat4		gModelviewMatrixIT;
uniform mat4		gProjectionMatrixIT;
uniform vec4		gCameraPosition;
uniform vec4		gLightPosition;
uniform vec4		gLightDirection;
uniform vec4		gAmbientColor;
uniform vec4		gDiffuseColor;
uniform vec4		gSpecularColor;
uniform vec4		gSideColor;
uniform vec4		gDestructionColor;
uniform vec4		gFurFactor;
uniform float       gFurNS;
uniform vec4		gDestructionTilesFactor;
uniform float		gTimeFactor;
uniform vec4        gWindFactor;
uniform vec4	    gColorFactor0;
uniform vec4	    gColorFactor1;
uniform vec4	    gColorFactor2;
uniform vec4	    gColorFactor3;
uniform sampler2D	gBaseTexture;
uniform sampler2D	gBumpTexture;
uniform sampler2D	gDestructionTexture;
uniform sampler2D	gColorTexture;
uniform samplerCube gCubeTexture;
uniform sampler3D	g3DNoiseTexture;

//
// Lights
//
uniform vec4		gLight0_Position;
uniform vec4		gLight0_Direction;
uniform vec4		gLight0_Color;
uniform vec4		gLight0_Angle;
uniform vec4		gLight0_Distance;

uniform vec4		gLight1_Position;
uniform vec4		gLight1_Direction;
uniform vec4		gLight1_Color;
uniform vec4		gLight1_Angle;
uniform vec4		gLight1_Distance;

uniform vec4		gLight2_Position;
uniform vec4		gLight2_Direction;
uniform vec4		gLight2_Color;
uniform vec4		gLight2_Angle;
uniform vec4		gLight2_Distance;

varying vec4        OUT_Diffuse;
varying vec3        OUT_Tangent;
varying vec3        OUT_Binormal;
varying vec3        OUT_Normal;
varying vec4        OUT_Color;
varying vec3        OUT_LVector;
varying vec2        OUT_UV;

///////////////////////////////////////////////////////////////////////////////
//
// Per vertex light contribution
//
vec3 LightContribution(in vec3 VertexPosition,
					   in vec3 VertexNormal,

					   in vec4 DynLightPos,
					   in vec4 DynLightDir,
					   in vec4 DynLightDist,
					   in vec4 DynLightAngl,
					   in vec4 DynLightColor)
{
 vec3  lvec        = DynLightPos.xyz - VertexPosition.xyz;
 float lvec_lensqr = dot(lvec, lvec);
 float lvec_leninv = inversesqrt(lvec_lensqr);
 vec3  lvec_normal = lvec.xyz * lvec_leninv;
 float diffuse     = max(dot(lvec_normal.xyz, VertexNormal.xyz), 0.0);

 float d      = 1.0 - min(max(lvec_lensqr-DynLightDist.x, 0.0)*DynLightDist.y, 1.0);
 float cutoff = clamp((dot(-lvec_normal.xyz, DynLightDir.xyz) - DynLightAngl.x) * DynLightAngl.y, 0.0, 1.0);

 return (cutoff * d) * (diffuse * DynLightColor.xyz);
}
///////////////////////////////////////////////////////////////////////////////
void main(void)
{
 vec4 Po     = vec4(gl_Vertex.xyz, 1.0);
 vec3 Pw     = (gModelviewMatrix * Po).xyz;
 gl_Position = gProjectionMatrix * vec4(Pw.xyz, 1.0);

 vec3 Nn     = (gModelviewMatrixIT * vec4(gl_Normal.xyz, 0.0)).xyz;
 Nn		     = normalize(Nn);

 vec3 Ln     = normalize(gLightPosition.xyz  - Pw);

 float diffs = max(dot(Nn.xyz, Ln.xyz), 0.0);

 vec3 mLight = (gDiffuseColor.xyz * diffs) + gAmbientColor.xyz;
 
 vec3 Tn   = (gModelviewMatrixIT * vec4(gl_MultiTexCoord1.xyz, 0.0)).xyz;
 Tn		   = normalize(Tn);
 vec3 Bn   = cross(Nn, Tn);
 
 vec3 RBn  = (gModelviewMatrixIT * vec4(gl_MultiTexCoord2.xyz, 0.0)).xyz;
 RBn	   = normalize(RBn);

 //
 // Mirrored flipp where need
 //
 if (gl_Color.g > 0.75)
	 Tn.xyz *= -1.0;
	 
 OUT_UV = gl_MultiTexCoord0.xy;

 //
 // Calculate L Vector
 //
 OUT_LVector  = vec3(dot(Ln.xyz, Tn.xyz), dot(Ln.xyz, Bn.xyz), dot(Ln.xyz, Nn.xyz)).xyz;
 OUT_Tangent  = Tn;
 OUT_Binormal = Bn;
 OUT_Normal   = Nn;
 OUT_Color.rgb= gl_Color.rgb;
 OUT_Color.a  = 0.5 + (dot(Bn.xyz, RBn.xyz) * 0.5);

#ifndef DO_NOT_USE_DYNAMIC_LIGHTS
	  mLight+= LightContribution(Pw, Nn,
								 gLight0_Position,
								 gLight0_Direction,
								 gLight0_Distance,
								 gLight0_Angle,
								 gLight0_Color);

	  mLight+= LightContribution(Pw, Nn,
								 gLight1_Position,
								 gLight1_Direction,
								 gLight1_Distance,
								 gLight1_Angle,
								 gLight1_Color);

	  mLight+= LightContribution(Pw, Nn,
								 gLight2_Position,
								 gLight2_Direction,
								 gLight2_Distance,
								 gLight2_Angle,
								 gLight2_Color);
#endif								 

 OUT_Diffuse.xyz = mLight;

 OUT_Diffuse.w   = 1.0;
}
///////////////////////////////////////////////////////////////////////////////
