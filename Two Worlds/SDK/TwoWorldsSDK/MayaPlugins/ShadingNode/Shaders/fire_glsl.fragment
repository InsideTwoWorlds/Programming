#version 110
#define DO_NOT_USE_DYNAMIC_LIGHTS

uniform mat4		gModelviewMatrix;
uniform mat4		gProjectionMatrix;
uniform mat4		gModelviewMatrixIT;
uniform mat4		gProjectionMatrixIT;
uniform vec4		gCameraPosition;
uniform vec4		gLightPosition;
uniform vec4		gLightDirection;
uniform vec4		gAmbientColor;
uniform vec4		gDiffuseColor;
uniform vec4		gSpecularColor;
uniform vec4		gSideColor;
uniform vec4		gDestructionColor;
uniform vec4		gFurFactor;
uniform float       gFurNS;
uniform vec4		gDestructionTilesFactor;
uniform float		gTimeFactor;
uniform vec4        gWindFactor;
uniform vec4	    gColorFactor0;
uniform vec4	    gColorFactor1;
uniform vec4	    gColorFactor2;
uniform vec4	    gColorFactor3;
uniform sampler2D	gBaseTexture;
uniform sampler2D	gBumpTexture;
uniform sampler2D	gDestructionTexture;
uniform sampler2D	gColorTexture;
uniform samplerCube gCubeTexture;
uniform sampler3D	g3DNoiseTexture;

//
// Lights
//
uniform vec4		gLight0_Position;
uniform vec4		gLight0_Direction;
uniform vec4		gLight0_Color;
uniform vec4		gLight0_Angle;
uniform vec4		gLight0_Distance;

uniform vec4		gLight1_Position;
uniform vec4		gLight1_Direction;
uniform vec4		gLight1_Color;
uniform vec4		gLight1_Angle;
uniform vec4		gLight1_Distance;

uniform vec4		gLight2_Position;
uniform vec4		gLight2_Direction;
uniform vec4		gLight2_Color;
uniform vec4		gLight2_Angle;
uniform vec4		gLight2_Distance;

///////////////////////////////////////////////////////////////////////////////
vec3 lerpme(vec3 x, vec3 y, float s)
{
 return x + s * (y - x); 
}
///////////////////////////////////////////////////////////////////////////////
void main(void)
{
 vec4 DiffuseMap= texture2D(gBaseTexture, gl_TexCoord[0].xy);
 vec4 NormalMap = texture2D(gBumpTexture, gl_TexCoord[0].xy);
 vec3 nmap      = normalize((NormalMap.xyz * 2.0) - 1.0);

 if (gl_Color.a < 0.5)
     nmap *= vec3(-1.0, -1.0, -1.0);

 float Diffuse  = clamp(dot(nmap.xyz, gl_TexCoord[1].xyz), 0.0, 1.0);
 float Specular = clamp(dot(nmap.xyz, gl_TexCoord[2].xyz), 0.0, 1.0);
 vec3 SpecClr   = gSpecularColor.xyz * (pow(Specular, gSpecularColor.w) * NormalMap.a);
 vec3 LCntrb    = Diffuse * gDiffuseColor.rgb;
 
#ifndef DO_NOT_USE_DYNAMIC_LIGHTS   
      LCntrb   += (clamp(dot(nmap, gl_TexCoord[3].xyz), 0.0, 1.0) * gl_TexCoord[3].w) * gLight0_Color.rgb;
	  LCntrb   += (clamp(dot(nmap, gl_TexCoord[4].xyz), 0.0, 1.0) * gl_TexCoord[4].w) * gLight1_Color.rgb;
	  LCntrb   += (clamp(dot(nmap, gl_TexCoord[5].xyz), 0.0, 1.0) * gl_TexCoord[5].w) * gLight2_Color.rgb;
#endif	  

 vec3 MetalResult    = clamp(LCntrb.rgb + gAmbientColor.rgb, 0.0, 1.0);
	  MetalResult    = clamp((DiffuseMap.rgb * MetalResult) + SpecClr, 0.0, 1.0);

 //
 // Calculate 3d perlin
 //
 vec3 rnd  = vec3(0.0, 0.0, 0.0);
 float f   = 1.0;
 vec3 Coord= gl_TexCoord[6].xyz;

 for (int i = 0; i < 4; i++)
 {
	 vec3 fnoise = texture3D(g3DNoiseTexture, Coord * 0.2 * f).rgb;
	 fnoise -= 0.5;
	 fnoise *= 4.0;
	 rnd    += fnoise / f;
	 f      *= 4.17;	
 }

 rnd = clamp(1.0 + rnd, 0.0, 2.0);

 vec2 DestCoord      = gl_TexCoord[0].xy + (rnd.x * 0.01, rnd.y * 0.03);
 vec4 DestructionMap = texture2D(gDestructionTexture, DestCoord.xy);
 DestructionMap.rgb *= rnd.x;
 
 vec3 FireColor = (DestructionMap.rgb * gDestructionColor.rgb);
	  FireColor+= pow(rnd.z*0.5, gDestructionTilesFactor.x) * gDestructionColor.rgb;
 MetalResult  = lerpme(MetalResult, FireColor, DiffuseMap.a);
 gl_FragColor =  vec4(MetalResult.xyz, 1.0);
 
 return;
}
///////////////////////////////////////////////////////////////////////////////
