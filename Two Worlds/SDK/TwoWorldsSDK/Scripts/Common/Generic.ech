#ifndef COMMON_GENERIC_ECH
#define COMMON_GENERIC_ECH

#include "Debug.ech"

//#define _DEMO


consts
{
    e16m = 16*e1m;
    e30m = 30*e1m;
    e40m = 40*e1m;
    e45m = 45*e1m;
    e60m = 60*e1m;
    e80m = 80*e1m;
    e100m = 100*e1m;
    eMaxEqClass = 50;
}//————————————————————————————————————————————————————————————————————————————————————————————————————|

#define INT_MAX 2147483647
#define INT_MIN (-2147483647 - 1)

#define A2G(nA) ((nA) >> 8)
#define G2A(nG) ((nG) << 8)
#define G2AMID(nG) (((nG) << 8) + 0x80)
#define M2A(a) ((a) << 6)
#define A2M(a) ((a) >> 6)

//————————————————————————————————————————————————————————————————————————————————————————————————————|

function int ABS(int nVal)
{
    if (nVal < 0)
    {
        return -nVal;
    }
    return nVal;
}//————————————————————————————————————————————————————————————————————————————————————————————————————|

function int MIN(int nVal1, int nVal2)
{
    if (nVal1 < nVal2)
    {
        return nVal1;
    }
    return nVal2;
}//————————————————————————————————————————————————————————————————————————————————————————————————————|

function int MIN(int nVal1, int nVal2, int nVal3)
{
    if (nVal1 < nVal2)
    {
        if (nVal1 < nVal3)
        {
            return nVal1;
        }
        else
        {
            return nVal3;
        }
    }
    else if (nVal2 < nVal3)
    {
        return nVal2;
    }
    return nVal3;
}//————————————————————————————————————————————————————————————————————————————————————————————————————|

function int MAX(int nVal1, int nVal2)
{
    if (nVal1 > nVal2)
    {
        return nVal1;
    }
    return nVal2;
}//————————————————————————————————————————————————————————————————————————————————————————————————————|

function int MAX(int nVal1, int nVal2, int nVal3)
{
    if (nVal1 > nVal2)
    {
        if (nVal1 > nVal3)
        {
            return nVal1;
        }
        else
        {
            return nVal3;
        }
    }
    else if (nVal2 > nVal3)
    {
        return nVal2;
    }
    return nVal3;
}//————————————————————————————————————————————————————————————————————————————————————————————————————|

function int CLAMP(int nVal1, int nVal2, int nVal3)
{
    ASSERT(nVal2 <= nVal3);
	if (nVal1 < nVal2)
    {
		return nVal2;
    }
	if (nVal1 > nVal3)
    {
		return nVal3;
    }
	return nVal1;
}//————————————————————————————————————————————————————————————————————————————————————————————————————|

function void SWAP(int& nVar1, int& nVar2)
{
    int nTmp;
    
    nTmp = nVar1;
    nVar1 = nVar2;
    nVar2 = nTmp;
}//————————————————————————————————————————————————————————————————————————————————————————————————————|

function int CAST_ANGLE(int nVal)
{
    return (nVal & 0xFF);
}//————————————————————————————————————————————————————————————————————————————————————————————————————|

function void ScanIntValues(string strValue, int arrValues[])
{
    int nPos, nStartPos, nVal;
    string strVal, strTmp;
    
    arrValues.RemoveAll();
    nPos = 0;
    nStartPos = 0;
    strVal = strValue;
    while (nPos <= strVal.GetLength())
    {
        if ((nPos == strVal.GetLength()) || (strVal.GetAt(nPos) == ' '))
        {
            if (nPos > nStartPos)
            {
                strTmp = strVal;
                strTmp.Mid(nStartPos, nPos - nStartPos);
                if (sscanf(strTmp, "%d", nVal) == 1)
                {
                    arrValues.Add(nVal);
                }
            }
            while ((nPos < strVal.GetLength()) && (strVal.GetAt(nPos) == ' '))
            {
                nPos++;
            }
            nStartPos = nPos;
        }
        nPos++;
    }
}//————————————————————————————————————————————————————————————————————————————————————————————————————|

function void ScanStringValues(string strValue, string arrValues[])
{
    int nPos, nStartPos;
    string strVal, strTmp;
    
    arrValues.RemoveAll();
    nPos = 0;
    nStartPos = 0;
    strVal = strValue;
    while (nPos <= strVal.GetLength())
    {
        if ((nPos == strVal.GetLength()) || (strVal.GetAt(nPos) == ' '))
        {
            if (nPos > nStartPos)
            {
                strTmp = strVal;
                strTmp.Mid(nStartPos, nPos - nStartPos);
                arrValues.Add(strTmp);
            }
            while ((nPos < strVal.GetLength()) && (strVal.GetAt(nPos) == ' '))
            {
                nPos++;
            }
            nStartPos = nPos;
        }
        nPos++;
    }
}//————————————————————————————————————————————————————————————————————————————————————————————————————|

function int ScanInt(string strValue)
{
    int nVal;
    
    sscanf(strValue, "%d", nVal);
    return nVal;
}//————————————————————————————————————————————————————————————————————————————————————————————————————|

#endif //COMMON_GENERIC_ECH
